#+TITLE: Contributing
#+DESCRIPTION: Documentation on internals for contributors.

Hello there, intrepid contributor! Please see the [[file:Readme.md][Readme]] for basic information
about this project.

If you would like to submit a bug report or contribute code or documentation,
read over the guidelines for the expectations. Then follow the development setup
steps to get started.

* Contribution Guidlines

The first thing you should do is browse open tickets for discussion relating to
the bug or feature you want to work on. Do your best here!

** Bug reports

Make sure you're using the latest release of the package, and are using
Emacs 25.

If no ticket exists, you can write a new issue. Provide reproduction steps if
you can, as well as your Emacs version and basic OS info.

If the issue relates to integration with =kubectl=, make sure to supply your
=kubectl= version.

** Code changes

For code changes, please follow the following guidelines.


- Create a GitHub issue to track your work
- Fork the repository on GitHub
- Create a feature branch for your PR
- Take the time to write good commit messages
- Run tests and make sure they all pass before submitting your PR.

* Development setup

You will need some third-party tools to build this project. Emacs 25+, GNU Make
and [[https://github.com/cask/cask][Cask]] are the most important.

You do not need =kubectl= installed in order to run tests, but you do need it to
run the package inside Emacs.

If you want to contribute code changes, you should fork the repository.
Otherwise clone the main repo.

#+BEGIN_SRC shell
# If forked
git clone "git@github.com:<username>/kubernetes-el.git"

# Otherwise
git clone "git@github.com:chrisbarrett/kubernetes-el.git"
#+END_SRC

Running make will tell you if you need to install anything to hack on the
project:

#+BEGIN_SRC
cd kubernetes-el
make
#+END_SRC

As a final check, run tests to make sure everything works. All tests should
pass.

#+BEGIN_SRC
make test
#+END_SRC

* Implementation Notes

Below are some general notes to help make sense of this beast.

** State

The package stores its state in several variables ([[file:kubernetes.el::;;%20Main%20state][here]]), which are set by background
polling timers ([[file:kubernetes.el::;;%20Background%20polling%20processes][here]]). These variables are cleared whenever:

1. The user closes all the main Kubernetes buffers, or
2. The user changes their Kubernetes context via the porcelain.

Certain user operations can update these state variables, e.g. updating the current namespace.

** Rendering

Rendering the main pods list is divided into two stages:

1. Take the current state and compile an AST of the desired changes
2. Erase the buffer and interpret the AST to execute the changes ([[file:kubernetes.el::;;%20Render%20AST%20Interpreter][here]]).

Future optimizations could include dirty checking to only update certain parts
of the buffer.

*** Core AST

The core AST is represented as a list with the following simple grammar:

#+BEGIN_EXAMPLE
hiddenp = t | nil

properties = SYMBOL SEXP

ast = STRING
    | ( line . STRING )
    | ( heading . ast )
    | ( indent ast )
    | ( propertize ( properties* ) ast )
    | ( section ( SYMBOL hiddenp ) ast )
    | ( padding )
    | ( ast* )
#+END_EXAMPLE

*** Sugar AST

For convenience, the AST provides extra forms that desugar into the core
forms above.

#+BEGIN_EXAMPLE

navtype = KEYWORD

keywidth = INTEGER

sugared
    = ast
    | ( nav-prop ( navtype SEXP+ ) ast )
    | ( copy-prop STRING ast )
    | ( key-value keywidth STRING STRING )
#+END_EXAMPLE
